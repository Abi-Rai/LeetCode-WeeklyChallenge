public class Solution {
    public int[][] UpdateMatrix(int[][] matrix){
    int rows = matrix.Length;
	int columns = matrix[0].Length;
	bool[][] visited = new bool[rows][];
    for(int i =0 ; i < visited.Length; i++){
        visited[i] = new bool[columns];
    }   
        
	Queue<Coordinates> queue = new Queue<Coordinates>();
	
    int[][] dirs = new int[4][]{new int[2]{1,0},new int[2]{-1,0},new int[2]{0,1},new int[2]{0,-1}};
	
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < columns; j++){
                if(matrix[i][j] == 0){
                    queue.Enqueue(new Coordinates(i,j));
                    visited[i][j] = true;
                }
            }
        }
        
        while (queue.Any()){
            Coordinates top = queue.Dequeue();
            foreach (int[] dir in dirs){
                int xx = top.x + dir[0];
                int yy = top.y + dir[1];
                if (xx >= 0 && xx < rows && yy >= 0 && yy < columns && !visited[xx][yy]){
                    matrix[xx][yy] = matrix[top.x][top.y]+1;
                    visited[xx][yy] = true;
                    queue.Enqueue(new Coordinates(xx, yy));
                }
            }
        }
        return matrix;
    }
    
    public class Coordinates{
        public int x ;
        public int y ;
        public Coordinates(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
}
