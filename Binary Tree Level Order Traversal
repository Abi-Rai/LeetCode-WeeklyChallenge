/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
     public IList<IList<int>> LevelOrder(TreeNode root){
        IList<IList<int>> res = new List<IList<int>>();
        if (root == null) return res;
        res.Add(new List<int>() {root.val});
        
        TraverseTree(root.left, res);
        TraverseTree(root.right, res);
        return res;
    }
    
    private void TraverseTree(TreeNode node, IList<IList<int>> res, int depth = 0){
        if (node == null) return;
        if (res.Count == ++depth) res.Add(new List<int>());
        res[depth].Add(node.val);
        TraverseTree(node.left, res, depth);
        TraverseTree(node.right, res, depth);
    }
}
