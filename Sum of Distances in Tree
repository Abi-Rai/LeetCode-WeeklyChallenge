public class Solution{
    public int[] SumOfDistancesInTree(int N, int[][] edges){
        Dictionary<int, HashSet<int>> graph = new Dictionary<int, HashSet<int>>();
        int[] count = new int[N], result = new int[N];
        for (int i = 0; i < N; i++){
            graph[i] = new HashSet<int>();
        }
        
        foreach(int[] e in edges){
            int u = e[0], v = e[1];
            graph[u].Add(v);
            graph[v].Add(u);
        }
        
        Dfs1(0, -1, graph, count, result);
        Dfs2(0, -1, graph, count, result);
        return result;
    }
    
    private void Dfs1(int node, int parent, Dictionary<int, HashSet<int>> graph, int[] count, int[] result){
        foreach(int neighbor in graph[node]){
          if (neighbor == parent) continue;
          Dfs1(neighbor, node, graph, count, result);
          count[node] += count[neighbor];
          result[node] += result[neighbor] + count[neighbor];
        }
        count[node]++;
    }
    
    private void Dfs2(int node, int parent, Dictionary<int, HashSet<int>> graph, int[] count, int[] result){
        foreach(int neighbor in graph[node]){
          if (neighbor == parent) continue;
          result[neighbor] = result[node] - count[neighbor] + count.Length - count[neighbor];
          Dfs2(neighbor, node, graph, count, result);
        }
    }
}
