public class Solution {
    public int Orientation(int[] p, int[] q, int[] r){
        return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);
    }
    public int[][] OuterTrees(int[][] trees) {
        Array.Sort(trees, (p,q) => q[0] - p[0] == 0 ? q[1] - p[1] : q[0] - p[0]);
        Stack<int[]> hull = new Stack<int[]>();
        for(int i=0; i< trees.Length; ++i){
            while(hull.Count()>=2 && Orientation(hull.ElementAt(1),hull.Peek(),trees[i])>0){
                hull.Pop();
            }
            hull.Push(trees[i]);
        }
        hull.Pop();
        for(int i= trees.Length - 1; i>= 0; --i){
            while(hull.Count()>=2 && Orientation(hull.ElementAt(1),hull.Peek(),trees[i])>0){
                hull.Pop();
            }
            hull.Push(trees[i]);
        }
        HashSet<int[]> ret = new HashSet<int[]>(hull);
        return ret.ToArray();
    }
}
