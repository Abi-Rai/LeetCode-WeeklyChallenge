/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    int total = 0;
    public enum State{ NONE, COVERED, CAMERA }
    
    public int MinCameraCover(TreeNode root){
        if (root == null) return 0;
        if (dfs(root) == State.NONE){
            total++;
        }
        return total;
    }
    
    private State dfs(TreeNode node){
        if (node == null) return State.COVERED;

        State leftState = dfs(node.left);
        State rightState = dfs(node.right);

        if (leftState == State.NONE || rightState == State.NONE){
            total++;
            return State.CAMERA;
        }

        if (leftState == State.CAMERA || rightState == State.CAMERA){
            return State.COVERED;
        }

        return State.NONE;
    }
}
