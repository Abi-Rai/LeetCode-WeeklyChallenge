public class Solution {
    public IList<int> SpiralOrder(int[][] matrix){
            List<int> res = new List<int>();
            if (matrix == null || matrix.Length == 0) return null;
            int m = matrix.Length;
            int n = matrix[0].Length;
            int top = 0, bottom = m - 1, left = 0, right = n - 1;
            while (top <= bottom && left <= right)
            {
                //left -> right
                for (int j = left; j <= right && CheckBoundary(top, bottom, left, right); ++j)
                {
                    res.Add(matrix[top][j]);
                }
                top++;
                //top->bottom
                for (int i = top; i <= bottom && CheckBoundary(top, bottom, left, right); ++i)
                {
                    res.Add(matrix[i][right]);
                }
                right--;
                //right-left
                for (int j = right; j >= left && CheckBoundary(top, bottom, left, right); --j)
                {
                    res.Add(matrix[bottom][j]);
                }
                bottom--;
                //bottom->up;
                for (int i = bottom; i >= top && CheckBoundary(top,bottom,left,right); --i)
                {
                    res.Add(matrix[i][left]);
                }
                left++;
            }
            return res;
        }
        private bool CheckBoundary(int top, int bottom, int left, int right) => (top <= bottom && left <= right);
}
