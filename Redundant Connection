public class Solution {
    HashSet<int> seen;
    int MAX_EDGE = 1000;
    public int[] FindRedundantConnection(int[][] edges) {
        seen = new HashSet<int>();
        List<int>[] graph = new List<int>[MAX_EDGE+1];
        for(int i=0;i<=MAX_EDGE;++i){
            graph[i]= new List<int>();
        }
        foreach(int[] edge in edges){
            seen.Clear();
            if(graph[edge[0]].Count()!=0&&graph[edge[1]].Count()!=0 && DFS(graph,edge[0],edge[1])){
                return edge;
            }
            graph[edge[0]].Add(edge[1]);
            graph[edge[1]].Add(edge[0]);
        }
        return new int[0];
    }
    public bool DFS(List<int>[] graph,int source,int target){
        if(!seen.Contains(source)){
            seen.Add(source);
            if(source==target) return true;
            foreach(int nei in graph[source]){
                if(DFS(graph,nei,target)) return true;
            }
        }
        return false;
    }
}
