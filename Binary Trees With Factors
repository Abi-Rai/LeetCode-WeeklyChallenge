public class Solution {
    public int NumFactoredBinaryTrees(int[] arr) {
        int MOD = 1_000_000_007;
        int N = arr.Length;
        Array.Sort(arr);
        long[] dp = new long[N];
        Array.Fill(dp, 1);
        Dictionary<int,int> index = new Dictionary<int,int>();
        for (int i = 0; i < N; ++i)
            index.Add(arr[i], i);

        for (int i = 0; i < N; ++i){
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (index.ContainsKey(right)) {
                        dp[i] = (dp[i] + dp[j] * dp[index[right]]) % MOD;
                    }
                }
            }
        }
        long ans = 0;
        foreach(var x in dp){
            ans+=x;
        }
        return (int) (ans % MOD);
    }
}
