public class MedianFinder {

    public MedianFinder(){
        
    }
    
    private int counter = 0;

        private SortedSet<int[]> setLow = new SortedSet<int[]>(
            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));

        private SortedSet<int[]> setHigh = new SortedSet<int[]>(
            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));
            
    public void AddNum(int num){
        var newNum = new int[2] { num, counter++ };

            bool twoTreesSameSize = setLow.Count == setHigh.Count;          

            if (twoTreesSameSize){
                if (setLow.Count == 0 || newNum[0] <= setLow.Max[0]){
                    setLow.Add(newNum);
                }
                else{
                    setHigh.Add(newNum);
                    setLow.Add(setHigh.Min);
                    setHigh.Remove(setHigh.Min);
                }
            }
            else if (newNum[0] <= setLow.Max[0]){
                setLow.Add(newNum);
                setHigh.Add(setLow.Max);
                setLow.Remove(setLow.Max);
            }
            else{
                setHigh.Add(newNum);
            }
    }
    
    public double FindMedian(){
        if (setLow.Count == 0){
            return 0;
        }

        if (setLow.Count == setHigh.Count){
            return (setLow.Max[0] + setHigh.Min[0]) / 2d;
        }
        else{
            return setLow.Max[0];
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.AddNum(num);
 * double param_2 = obj.FindMedian();
 */
