public class Solution {
    public IList<IList<int>> FourSum(int[] nums, int target) {
        Array.Sort(nums);
        return kSum(nums,target,0,4);
    }
    
    private IList<IList<int>> kSum(int[] nums,int target, int start, int k){
        IList<IList<int>> res = new List<IList<int>>();
        if(start==nums.Length||nums[start]*k>target||target>nums[nums.Length-1]*k) return res;
        if(k==2) return TwoSum(nums,target,start);
        for(int i=start;i<nums.Length;++i){
            if(i==start || nums[i-1] != nums[i]){
                foreach(List<int> set in kSum(nums,target-nums[i],i+1,k-1)){
                    List<int> tmp = new List<int>(){nums[i]};
                    tmp.AddRange(set);
                    res.Add(tmp);
                }
            }
        }
        return res;
    }
    
    private IList<IList<int>> TwoSum(int[] nums,int target, int start){
        IList<IList<int>> res = new List<IList<int>>();
        int lo = start, hi = nums.Length-1;
        while(lo<hi){
            int sum= nums[lo]+nums[hi];
            if(sum<target||(lo>start&&nums[lo]==nums[lo-1])){
                ++lo;
            }else if(sum>target||(hi<nums.Length-1&&nums[hi]==nums[hi+1])){
                --hi;
            }else{
                res.Add(new List<int>(){nums[lo++],nums[hi--]});
            }
        }
        return res;
    }
}
