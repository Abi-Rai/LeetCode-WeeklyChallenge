public class Solution {
    
    private int[] dx = {-1, 1, 0, 0};
    private int[] dy = {0, 0, -1, 1};
    public int LargestIsland(int[][] grid) {
        
        int m = grid.Length;
        int n = grid[0].Length;   
        
        int groupId = 2; //gotcha, can't have 0 or 1
        var map = new Dictionary<int, int>();
        
        var max = 0; 
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
            {               
                if(grid[i][j] == 1)
                {                      
                    map.Add(groupId, helper(grid, i, j, groupId));                    
                    max = Math.Max(max, map[groupId]); //gtocha  
                    groupId++;
                }                
            }   
        
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
            {
                var set = new HashSet<int>();  
                if(grid[i][j] == 0)
                {                    
                    for(int k = 0; k < 4; k++)
                    {
                        var row = i + dx[k];
                        var col = j + dy[k];

                        if(row >= 0 && row < grid.Length && col >= 0 && col < grid[0].Length && grid[row][col] > 1 && !set.Contains(grid[row][col])) //gothca
                            set.Add(grid[row][col]);
                    }                    
                }
                var curMax = 0;
                foreach(var id in set)
                {
                    curMax += map[id];
                }
                max = Math.Max(max, 1 + curMax);
            }
        
        return max;        
    }
    
    private int helper(int[][] grid, int r, int c, int groupId)
    {
        int area = 0;
        grid[r][c] = groupId;              
        
        for(int i = 0; i < 4; i++)
        {
            var row = r + dx[i];
            var col = c + dy[i];
            
            if(row >= 0 && row < grid.Length && col >= 0 && col < grid[0].Length && grid[row][col] == 1)
                area += helper(grid, row, col, groupId);
        }
        return 1 + area;
    }
}
