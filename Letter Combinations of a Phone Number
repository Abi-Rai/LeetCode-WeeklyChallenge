public class Solution {
    Dictionary<char,List<char>> dict = new Dictionary<char,List<char>>(){
        {'2',new List<char>(){'a','b','c'}},
        {'3',new List<char>(){'d','e','f'}},
        {'4',new List<char>(){'g','h','i'}},
        {'5',new List<char>(){'j','k','l'}},
        {'6',new List<char>(){'m','n','o'}},
        {'7',new List<char>(){'p','q','r','s'}},
        {'8',new List<char>(){'t','u','v'}},
        {'9',new List<char>(){'w','x','y','z'}}
    };
    IList<string> res = new List<string>();

    public IList<string> LetterCombinations(string digits) {
        RecursiveCombine(digits,"",0);
        return res;
    }
    
    private void RecursiveCombine(string dig, string curr, int idx){
        if(idx==dig.Length){
            if(curr.Length>0){
                res.Add(curr);
            }
            return;
        }
        
        for(int i=0; i<dict[dig[idx]].Count();++i){
            if(i==0){
                char vv = dict[dig[idx]][i];
            }
            RecursiveCombine(dig,curr+dict[dig[idx]][i],idx+1);
        }
    }
}
